#!/usr/bin/env node

const yargs = require('yargs');
const path = require('path');

const FtpSrv = require('../src');

const args = setupYargs();

setupCredentials();
startFtpServer();

function setupYargs() {
  return yargs
    .option('address', {
      alias: 'a',
      default: 'ftp://0.0.0.0:9876',
      describe: '{ftp|ftps}://{ip-address}:[port]',
      type: 'string'
    })
    .option('username', {
      describe: 'Blank for anonymous',
      default: '',
      type: 'string'
    })
    .option('password', {
      default: '',
      type: 'string'
    })
    .option('read-only', {
      describe: 'Disable upload',
      boolean: true,
      default: false
    })
    .option('credentials', {
      alias: 'c',
      describe: 'Load user & pass from json file',
      default: ''
    })
    .argv;
}

function setupCredentials() {
  if (args.username.length === 0 && args.credentials.length > 0) {
    const credentials = require(path.resolve(args.credentials));
    if (credentials.username) {
      args.username = credentials.username;
    }
    if (credentials.password) {
      args.password = credentials.password;
    }
  }
}

function getPathToServe(args_) {
  const path = args_['_'];
  if (path.length === 0) {
    return process.cwd();
  } else {
    return path[0];
  }
}

function getBlacklistedForReadonlyCommands(isReadOnly) {
  if (isReadOnly) {
    return ['allo', 'appe', 'dele', 'mkd', 'rmd', 'rnfr', 'rnto', 'stor', 'stru']
      .map(item => item.toUpperCase());
  }
  return [];
}

function startFtpServer() {
  const ftpServer = new FtpSrv(args.address);

  ftpServer.on('login', (data, resolve, reject) => {
    const isAnonymous = args.username === '';
    if (isAnonymous || (data.username === args.username && data.password === args.password)) {
      resolve({
        root: getPathToServe(args),
        blacklist: getBlacklistedForReadonlyCommands(args.readOnly)
      });
    } else {
      reject(new Error('Invalid username or password'));
    }
  });

  ftpServer.listen();
}

process.on('SIGINT', function () {
  logger.info(colors.red('ftp-srv stopped.'));
  process.exit();
});

process.on('SIGTERM', function () {
  logger.info(colors.red('ftp-srv stopped.'));
  process.exit();
});
